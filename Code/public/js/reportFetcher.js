const {jsPDF} = window.jspdf;

document.getElementById("backFromReport").addEventListener("click", () => history.back());

let pdfContainer = document.getElementById("pdfContainer");
let pdfObjectElement = document.getElementById("pdf");
const reportType = pdfContainer.dataset.type;
const user = pdfContainer.dataset.user;
const currentDate = new Date().toLocaleDateString();


switch (reportType) {
    case "mailList":
        fetch(
            "/api/reports/mailList",
            {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                }
            }
        ).then(
            (response) => {
                if (!response.ok){
                    throw new Error(`Error: ${response.status} - ${response.json()}`)
                }
                return response.json();
            }
        ).then(
            (data) => {
                const doc = new jsPDF(
                    {
                        orientation: "portrait",
                        unit: "pt",
                        format: "letter",
                    }
                );
                doc.setFont("helvetica");
                const pageMiddle = 306;
                // 8.5in = 612pt, so 612 - 40 -40 =
                const maxWidth = 532;

                const columns = [
                    {header: "Client Name", dataKey: "name"},
                    {header: "Phone Number", dataKey: "phoneNumber"},
                    {header: "Address", dataKey: "address"},
                    {header: "City", dataKey: "city"},
                    {header: "State", dataKey: "state"},
                    {header: "Zip", dataKey: "zip"},
                ]
                const xMargin = 40;
                let lastY = 0;
                doc.setFontSize(18);
                lastY += 72;
                doc.text("Mailing List", pageMiddle, lastY, {align: "center"});
                doc.setFontSize(14);
                lastY += 18 * 1.15;
                doc.text("Humboldt Community Access and Resource Center", pageMiddle, lastY,{align: "center"});
                doc.setFontSize(11);
                lastY += 14 * 1.15;
                doc.text("Generated by User: " + user, xMargin, lastY);
                lastY += 11 * 1.15;
                doc.text("Generated on: " + currentDate, xMargin, lastY );
                lastY += 11 * 1.6;
                doc.text("Mailing list of clients who are viewable to the current requester.", xMargin, lastY);
                lastY += 11 * 2;
                doc.setFont("helvetica", "bold");
                const disclaimer = doc.splitTextToSize("If you are not the intended recipient of this document or their agent, or if this document " +
                    "has been delivered to you in error, please immediately alert HCAR and " +
                    "delete this document.", maxWidth);
                doc.text(disclaimer, xMargin, lastY);

                lastY += 11 * 1.15 * (disclaimer.length + 1);

                doc.autoTable({
                    body: data,
                    columns: columns,
                    startY: lastY
                });

                const pdfBlob = doc.output("blob");
                const pdfURL = URL.createObjectURL(pdfBlob);
                pdfObjectElement.data = pdfURL;
                const fallback = document.createElement('div');
                fallback.innerHTML = "<p>Unable to embed PDF in your browser...</p>"+
                    `<p><a href=\"${pdfURL}\" download=\"mailing_list_${currentDate}.pdf\">Click here to download the PDF instead</a></p>`;
                pdfObjectElement.appendChild(fallback);
                document.getElementById("pdfStatus").innerText = "Your report is generated and is displayed below.";
            }
        ).catch(
            (error) => {
                pdfContainer.removeChild(document.getElementById("pdf"));
                pdfContainer.append("Error: Failure generating report. Please try again or contact a system administrator.");
            }
        )
        break;
    case "expPurchaseInMonth":
        fetch(
            "/api/reports/expPurchaseInMonth",
            {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                }
            }
        ).then(
            (response) => {
                if (!response.ok){
                    throw new Error(`Error: ${response.status} - ${response.json()}`)
                }
                return response.json();
            }
        ).then(
            (data) => {
                const doc = new jsPDF(
                    {
                        orientation: "portrait",
                        unit: "pt",
                        format: "letter",
                    }
                );
                doc.setFont("helvetica");
                const pageMiddle = 306;
                // 8.5in = 612pt, so 612 - 40 -40 =
                const maxWidth = 532;

                const columns = [
                    {header: "Client Name", dataKey: "name"},
                    {header: "Date of Birth", dataKey: "dateOfBirth"},
                    {header: "Phone Number", dataKey: "phoneNumber"},
                    {header: "Latest Purchase of Services", dataKey: "pos"},
                    {header: "Days Remaining", dataKey: "daysRemaining"},
                ]
                const xMargin = 40;
                let lastY = 0;
                doc.setFontSize(18);
                lastY += 72;
                doc.text("Purchases of Services Near Expiration", pageMiddle, lastY, {align: "center"});
                doc.setFontSize(14);
                lastY += 18 * 1.15;
                doc.text("Humboldt Community Access and Resource Center", pageMiddle, lastY, {align: "center"});
                doc.setFontSize(11);
                lastY += 14 * 1.15;
                doc.text("Generated by User: " + user, xMargin, lastY);
                lastY += 11 * 1.15;
                doc.text("Generated on: " + currentDate, xMargin, lastY );
                lastY += 11 * 1.6;
                doc.text("List of clients with PoS expiring within 31 days who are also viewable to the current requester.", xMargin, lastY);
                lastY += 11 * 2;
                doc.setFont("helvetica", "bold");
                const disclaimer = doc.splitTextToSize("If you are not the intended recipient of this document or their agent, or if this document " +
                    "has been delivered to you in error, please immediately alert HCAR and " +
                    "delete this document.", maxWidth);
                doc.text(disclaimer, xMargin, lastY);

                lastY += 11 * 1.15 * (disclaimer.length + 1);

                doc.autoTable({
                    body: data,
                    columns: columns,
                    startY: lastY
                });

                const pdfBlob = doc.output("blob");
                const pdfURL = URL.createObjectURL(pdfBlob);
                pdfObjectElement.data = pdfURL;
                const fallback = document.createElement('div');
                fallback.innerHTML = "<p>Unable to embed PDF in your browser...</p>"+
                    `<p><a href=\"${pdfURL}\" download=\"pos_near_expiration_${currentDate}.pdf\">Click here to download the PDF instead</a></p>`;
                pdfObjectElement.appendChild(fallback);
                document.getElementById("pdfStatus").innerText = "Your report is generated and is displayed below.";
            }
        ).catch(
            (error) => {
                pdfContainer.removeChild(document.getElementById("pdf"));
                pdfContainer.append("Error: Failure generating report. Please try again or contact a system administrator.");
            }
        )
        break;
    case "listAllClients":
        fetch(
            "/api/reports/listAllClients",
            {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                }
            }
        ).then(
            (response) => {
                if (!response.ok){
                    throw new Error(`Error: ${response.status} - ${response.json()}`)
                }
                return response.json();
            }
        ).then(
            (data) => {
                const doc = new jsPDF(
                    {
                        orientation: "portrait",
                        unit: "pt",
                        format: "letter",
                    }
                );
                doc.setFont("helvetica");
                const pageMiddle = 306;
                // 8.5in = 612pt, so 612 - 40 -40 =
                const maxWidth = 532;

                const columns = [
                    {header: "Client Name", dataKey: "name"},
                    {header: "Date of Birth", dataKey: "dateOfBirth"},
                    {header: "Gender", dataKey: "gender"}
                ]
                const xMargin = 40;
                let lastY = 0;
                doc.setFontSize(18);
                lastY += 72;
                doc.text("Client List", pageMiddle, lastY, {align: "center"});
                doc.setFontSize(14);
                lastY += 18 * 1.15;
                doc.text("Humboldt Community Access and Resource Center", pageMiddle, lastY, {align: "center"});
                doc.setFontSize(11);
                lastY += 14 * 1.15;
                doc.text("Generated by User: " + user, xMargin, lastY);
                lastY += 11 * 1.15;
                doc.text("Generated on: " + new Date().toLocaleDateString(), xMargin, lastY );
                lastY += 11 * 1.6;
                doc.text("Report of clients who are viewable to the current requester.", xMargin, lastY);
                lastY += 11 * 2;
                doc.setFont("helvetica", "bold");
                const disclaimer = doc.splitTextToSize("If you are not the intended recipient of this document or their agent, or if this document " +
                    "has been delivered to you in error, please immediately alert HCAR and " +
                    "delete this document.", maxWidth);
                doc.text(disclaimer, xMargin, lastY);

                lastY += 11 * 1.15 * (disclaimer.length + 1);


                doc.autoTable({
                    body: data,
                    columns: columns,
                    startY: lastY
                });

                const pdfBlob = doc.output("blob");
                const pdfURL = URL.createObjectURL(pdfBlob);
                pdfObjectElement.data = pdfURL;
                const fallback = document.createElement('div');
                fallback.innerHTML = "<p>Unable to embed PDF in your browser...</p>"+
                    `<p><a href=\"${pdfURL}\" download=\"client_list_${currentDate}.pdf\">Click here to download the PDF instead</a></p>`;
                pdfObjectElement.appendChild(fallback);
                document.getElementById("pdfStatus").innerText = "Your report is generated and is displayed below.";
            }
        ).catch(
            (error) => {
                pdfContainer.removeChild(document.getElementById("pdf"));
                pdfContainer.append("Error: Failure generating report. Please try again or contact a system administrator.");
            }
        )
        break;
    default:
        pdfContainer.removeChild(document.getElementById("pdf"));
        pdfContainer.append("Error: Unknown report type requested. Please try again or contact a system administrator.");
        break;
}