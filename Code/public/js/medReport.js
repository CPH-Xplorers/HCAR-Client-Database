/**
 * @file This file contains the JavaScript code for generating a medical report PDF using jsPDF.
 * @author Orlando Trujillo-Ortiz
 */

/** @type {HTMLButtonElement} */
const theButton = document.getElementById("medReportButton");
theButton.addEventListener("click", () => {
    const {jsPDF} = window.jspdf;
    const user = document.getElementById("tabContainer").dataset.user;
    const currentDate = new Date().toLocaleString("en-US", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
    });

    fetch(
        "/api/reports/medInfo",
        {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                clientID: document.getElementById("caseNoteTable").dataset.clientid
            })
        }
    ).then(
        (response) => {
            if (!response.ok) {
                throw new Error(`Error: ${response.status} - ${response.json()}`)
            }
            return response.json();
        }
    ).then(
        (data) => {
            const doc = new jsPDF(
                {
                    orientation: "portrait",
                    unit: "pt",
                    format: "letter",
                }
            );
            doc.setFont("helvetica");
            /** 306pt */
            const pageMiddle = 306;
            // 8.5in = 612pt, so 612 - 40 -40 = 532pt
            const maxWidth = 532;

            doc.addImage("../icons/logo-color.png", "PNG", 40, 20, 70, 70);

            const xMargin = 40;
            let lastY = 0;
            doc.setFontSize(18);
            lastY += 72;
            doc.text("Medical Report", pageMiddle, lastY, {align: "center"});
            doc.setFontSize(14);
            lastY += 18 * 1.15;
            doc.text("Humboldt Community Access and Resource Center", pageMiddle, lastY, {align: "center"});
            doc.setFontSize(11);
            lastY += 14 * 1.15;
            doc.text("Generated by User: " + user, xMargin, lastY);
            lastY += 11 * 1.15;
            doc.text("Generated on: " + currentDate, xMargin, lastY);
            lastY += 11 * 1.6;
            doc.text("Summary of relevant medical information for the selected client.", xMargin, lastY);
            lastY += 11 * 2;
            doc.setFont("helvetica", "bold");
            const disclaimer = doc.splitTextToSize("If you are not the intended recipient of this document or their agent, or if this document " +
                "has been delivered to you in error, please immediately alert HCAR and " +
                "delete this document.", maxWidth);
            doc.text(disclaimer, xMargin, lastY);

            lastY += 11 * 1.15 * (disclaimer.length + 2);

            doc.setFontSize(14)
            doc.setFont("helvetica", "bold");
            doc.text("Client Demographics", xMargin, lastY);
            doc.setFont("helvetica", "normal");
            doc.setFontSize(10)
            lastY += 14 * 1.15;

            const demographicsCols = [
                {header: "First Name", dataKey: "fName"},
                {header: "Middle Name", dataKey: "mName"},
                {header: "Last Name", dataKey: "lName"},
                {header: "Phone Number", dataKey: "phoneNumber"},
                {header: "Address", dataKey: "address"},
                {header: "City", dataKey: "city"},
                {header: "State", dataKey: "state"},
                {header: "Zip", dataKey: "zip"},
            ];

            const sexGenderCols = [
                {header: "Sex", dataKey: "sex"},
                {header: "Gender", dataKey: "gender"},
                {header: "Pronouns", dataKey: "pronouns"}
            ];

            // main demos first
            doc.autoTable({
                columns: demographicsCols,
                body: [
                    data.client
                ],
                startY: lastY
            });

            doc.autoTable({
                columns: sexGenderCols,
                body: [
                    data.client
                ],
                startY: doc.lastAutoTable.finalY + 10
            });

            lastY = doc.lastAutoTable.finalY + 10 * 2.5;

            const insuranceCols = [
                {header: "Name", dataKey: "name"},
                {header: "Policy Number", dataKey: "policyNumber"}
            ];

            doc.setFont("helvetica", "bold");
            doc.setFontSize(14);
            doc.text("Insurance Information", xMargin, lastY);
            doc.setFont("helvetica", "normal");
            doc.setFontSize(10);
            lastY += 14 * 1.15;

            let insuranceData = [];
            if( data.preferences && data.preferences.primaryInsurance){
                insuranceData.push(data.preferences.primaryInsurance);
                if (data.preferences.secondaryInsurance){
                    insuranceData.push(data.preferences.secondaryInsurance);
                } else{
                    insuranceData.push({
                        name: "No Secondary Insurance on File",
                        policyNumber: "N/A"
                    });
                }
            } else {
                insuranceData = [
                    {
                        name: "No Insurance on File",
                        policyNumber: "N/A"
                    }
                ]
            }

            doc.autoTable({
                columns: insuranceCols,
                body: insuranceData,
                startY: lastY
            });

            lastY = doc.lastAutoTable.finalY + 10 * 2.5;

            doc.setFont("helvetica", "bold");
            doc.setFontSize(14);
            doc.text("Healthcare Contacts", xMargin, lastY);
            doc.setFont("helvetica", "normal");
            doc.setFontSize(10);
            lastY += 14 * 1.15;

            const healthcareCols = [
                {header: "Type", dataKey: "type"},
                {header: "Name", dataKey: "name"},
                {header: "Phone Number", dataKey: "phoneNumber"},
                {header: "Address", dataKey: "address"},
            ];

            let healthcareData = [];
            if (data.preferences && data.preferences.pcp){
                healthcareData.push({type: "Primary Care Provider", ...data.preferences.pcp});
            } else{
                healthcareData.push({
                    type: "Primary Care Provider",
                    name: "No Primary Care Provider on File",
                    phoneNumber: "N/A",
                    address: "N/A"
                });
            }
            if (data.preferences && data.preferences.primaryPhysician){
                healthcareData.push({type: "Primary Physician", ...data.preferences.primaryPhysician});
            } else{
                healthcareData.push({
                    type: "Primary Physician",
                    name: "No Primary Physician on File",
                    phoneNumber: "N/A",
                    address: "N/A"
                });
            }

            doc.autoTable({
                columns: healthcareCols,
                body: healthcareData,
                startY: lastY
            });

            lastY = doc.lastAutoTable.finalY + 10 * 2.5;

            doc.setFont("helvetica", "bold");
            doc.setFontSize(14);
            doc.text("Vaccination Records", xMargin, lastY);
            doc.setFont("helvetica", "normal");
            doc.setFontSize(10);
            lastY += 14 * 1.15;

            const vaccinationCols = [
                {header: "Name of Vaccine", dataKey: "name"},
                {header: "Date Taken", dataKey: "dateTaken"},
            ];

            if (data.vaccinations == null) {
                data.vaccinations = [{name: "No Vaccinations on File", dateTaken: "N/A"}];
            }

            doc.autoTable({
                columns: vaccinationCols,
                body: data.vaccinations,
                startY: lastY
            });

            lastY = doc.lastAutoTable.finalY + 10 * 2.5;

            doc.setFont("helvetica", "bold");
            doc.setFontSize(14);
            doc.text("Medication List", xMargin, lastY);
            doc.setFont("helvetica", "normal");
            doc.setFontSize(10);
            lastY += 14 * 1.15;

            const medicationCols = [
                {header: "Name of Medication", dataKey: "name"},
                {header: "PRN", dataKey: "prn"},
                {header: "Dosage", dataKey: "dosage"},
                {header: "Frequency", dataKey: "frequency"},
                {header: "Purpose", dataKey: "purpose"},
                {header: "Side Effects", dataKey: "sideEffects"},
                {header: "Prescribed By", dataKey: "prescriber"}
            ];

            if (data.medications == null) {
                data.medications = [{name: "No Medications on File", prn: "N/A", dosage: "N/A", frequency: "N/A", purpose: "N/A", sideEffects: "N/A", prescriber: "N/A"}];
            }

            doc.autoTable({
                columns: medicationCols,
                body: data.medications,
                startY: lastY
            })

            doc.output("pdfobjectnewwindow" , {filename: "Medical Report " + user + " " + currentDate + ".pdf"});
        }).catch(
        (e) => {
            console.error("Error generating medical report: ", e);
        }
    )
});